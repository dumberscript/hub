local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager =
    loadstring(
    game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua")
)()
local TweenService = game:GetService("TweenService")

local Window =
    Fluent:CreateWindow(
    {
        Title = "[Update2]Anime Spirit Journey",
        SubTitle = " Komet Hub",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = false,
        Theme = "Light",
        MinimizeKey = Enum.KeyCode.LeftControl
    }
)

local Tabs = {
    Automation = Window:AddTab({Title = "Automation", Icon = "bot"}),
    Trial = Window:AddTab({Title = "Trial", Icon = "target"}),
    Teleport = Window:AddTab({Title = "Teleport", Icon = "location"}),
    Egg = Window:AddTab({Title = "Egg", Icon = "egg"}),
    Settings = Window:AddTab({Title = "Settings", Icon = "settings"})
}

local Options = Fluent.Options

local virtualUser = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(
    function()
        virtualUser:CaptureController()
        virtualUser:ClickButton2(Vector2.new())
    end
)

do
    local AutoClickToggle =
        Tabs.Automation:AddToggle(
        "AutoClickToggle",
        {
            Title = "Auto Click",
            Description = "Automatically performs clicks every 0.1s",
            Default = false
        }
    )

    AutoClickToggle:OnChanged(
        function(value)
            pcall(
                function()
                    if value then
                        task.spawn(
                            function()
                                local remote =
                                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild(
                                    "Bridge",
                                    10
                                )
                                if not remote then
                                    AutoClickToggle:SetValue(false)
                                    return
                                end

                                while AutoClickToggle.Value and not Fluent.Unloaded do
                                    local args = {
                                        [1] = "General",
                                        [2] = "World",
                                        [3] = "Click"
                                    }
                                    pcall(
                                        function()
                                            remote:FireServer(unpack(args))
                                        end
                                    )
                                    wait(0.2)
                                end
                            end
                        )
                    end
                end
            )
        end
    )

    local function GetCurrentMapEnemies()
        local mapsFolder = workspace:WaitForChild("Client"):WaitForChild("Maps")
        local enemiesFolder = workspace:WaitForChild("Server"):WaitForChild("Enemies")
        local uniqueEnemies = {}
        local enemyList = {}

        local currentMap = nil
        for _, map in pairs(mapsFolder:GetChildren()) do
            if map:IsA("Folder") then
                currentMap = map
                break
            end
        end

        if currentMap then
            local mapName = currentMap.Name
            local enemyFolder = enemiesFolder:FindFirstChild(mapName)
            if enemyFolder then
                for _, enemy in pairs(enemyFolder:GetChildren()) do
                    if enemy:IsA("BasePart") and not uniqueEnemies[enemy.Name] then
                        uniqueEnemies[enemy.Name] = true
                        table.insert(enemyList, enemy.Name)
                    end
                end
            end
        end

        return enemyList
    end

    local MobDropdown =
        Tabs.Automation:AddDropdown(
        "MobDropdown",
        {
            Title = "Select Mob",
            Description = "Choose a mob to attack",
            Values = GetCurrentMapEnemies(),
            Default = 1
        }
    )

    MobDropdown:OnChanged(
        function(value)
            Options.MobDropdown.Value = value
        end
    )

    local RefreshMobButton =
        Tabs.Automation:AddButton(
        {
            Title = "Refresh Mob",
            Description = "Refresh the list of mobs from the current world",
            Callback = function()
                local newValues = GetCurrentMapEnemies()
                MobDropdown:SetValues(newValues)
                if #newValues > 0 then
                    MobDropdown:SetValue(newValues[1])
                end
            end
        }
    )

    local MovementModeDropdown =
        Tabs.Automation:AddDropdown(
        "MovementModeDropdown",
        {
            Title = "Movement Mode",
            Description = "Select movement method for attacks",
            Values = {"TP", "Walk", "None"},
            Default = 1
        }
    )

    MovementModeDropdown:OnChanged(
        function(value)
            Options.MovementModeDropdown.Value = value
        end
    )

    local AttackNearestToggle =
        Tabs.Automation:AddToggle(
        "AttackNearestToggle",
        {
            Title = "Attack Nearest Mob",
            Description = "Attacks the closest enemy in the current map with all your pets",
            Default = false
        }
    )

    AttackNearestToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local player = game.Players.LocalPlayer
                        local mapsFolder = workspace:WaitForChild("Client"):WaitForChild("Maps")
                        local enemiesFolder = workspace:WaitForChild("Server"):WaitForChild("Enemies")
                        local petsFolder = workspace:WaitForChild("Server"):WaitForChild("Pets")
                        local remote =
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge")

                        repeat
                            wait(0.5)
                        until #petsFolder:GetChildren() > 0 or wait(10) == nil

                        local petIds = {}
                        local playerName = player.Name:lower()
                        for _, pet in pairs(petsFolder:GetChildren()) do
                            if pet:IsA("Model") then
                                local fullName = pet.Name:lower()
                                local separatorIndex = fullName:find("---")
                                if separatorIndex then
                                    local petId = fullName:sub(separatorIndex + 3)
                                    if petId and fullName:find(playerName, 1, true) == 1 then
                                        table.insert(petIds, petId)
                                    end
                                end
                            end
                        end

                        if #petIds == 0 then
                            AttackNearestToggle:SetValue(false)
                            return
                        end

                        local petIndex = 1

                        while AttackNearestToggle.Value and not Fluent.Unloaded do
                            local character = player.Character
                            if
                                character and character:FindFirstChild("HumanoidRootPart") and
                                    character:FindFirstChild("Humanoid")
                             then
                                local humanoid = character.Humanoid
                                local playerPos = character.HumanoidRootPart.Position
                                local nearestEnemy, nearestFolder, shortestDistance = nil, nil, math.huge

                                local currentMap = nil
                                for _, map in pairs(mapsFolder:GetChildren()) do
                                    if map:IsA("Folder") then
                                        currentMap = map
                                        break
                                    end
                                end

                                if currentMap then
                                    local mapName = currentMap.Name
                                    local enemyFolder = enemiesFolder:FindFirstChild(mapName)

                                    if enemyFolder then
                                        for _, enemy in pairs(enemyFolder:GetChildren()) do
                                            if enemy:IsA("BasePart") and enemy.Parent then
                                                local distance = (playerPos - enemy.Position).Magnitude
                                                if distance < shortestDistance then
                                                    shortestDistance = distance
                                                    nearestEnemy = enemy
                                                    nearestFolder = enemyFolder
                                                end
                                            end
                                        end
                                    end
                                end

                                if nearestEnemy and nearestFolder then
                                    local currentPetId = petIds[petIndex]
                                    local enemyInstance = nearestEnemy

                                    if enemyInstance and enemyInstance.Parent then
                                        local movementMode = Options.MovementModeDropdown.Value
                                        if movementMode == "TP" then
                                            local targetPosition = enemyInstance.Position + Vector3.new(0, 4, 0)
                                            local tweenInfo =
                                                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                                            local tween =
                                                TweenService:Create(
                                                character.HumanoidRootPart,
                                                tweenInfo,
                                                {CFrame = CFrame.new(targetPosition)}
                                            )
                                            tween:Play()
                                            tween.Completed:Wait()
                                        elseif movementMode == "Walk" then
                                            humanoid.WalkToPoint = enemyInstance.Position
                                            wait(0.5)
                                            if not enemyInstance.Parent then
                                                humanoid.WalkToPoint = character.HumanoidRootPart.Position
                                            end
                                        end

                                        if enemyInstance and enemyInstance.Parent then
                                            local args = {
                                                [1] = "General",
                                                [2] = "Pets",
                                                [3] = "Attack",
                                                [4] = currentPetId,
                                                [5] = enemyInstance
                                            }

                                            pcall(
                                                function()
                                                    remote:FireServer(unpack(args))
                                                end
                                            )
                                        end
                                    end

                                    petIndex = petIndex + 1
                                    if petIndex > #petIds then
                                        petIndex = 1
                                    end
                                end
                            end
                            wait(0.3)
                        end
                    end
                )
            end
        end
    )

    local AttackSelectedMobToggle =
        Tabs.Automation:AddToggle(
        "AttackSelectedMobToggle",
        {
            Title = "Attack Selected Mob",
            Description = "Attacks the closest selected mob in the current map",
            Default = false
        }
    )

    AttackSelectedMobToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local player = game.Players.LocalPlayer
                        local mapsFolder = workspace:WaitForChild("Client"):WaitForChild("Maps")
                        local enemiesFolder = workspace:WaitForChild("Server"):WaitForChild("Enemies")
                        local petsFolder = workspace:WaitForChild("Server"):WaitForChild("Pets")
                        local remote =
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge")

                        repeat
                            wait(0.5)
                        until #petsFolder:GetChildren() > 0 or wait(10) == nil

                        local petIds = {}
                        local playerName = player.Name:lower()
                        for _, pet in pairs(petsFolder:GetChildren()) do
                            if pet:IsA("Model") then
                                local fullName = pet.Name:lower()
                                local separatorIndex = fullName:find("---")
                                if separatorIndex then
                                    local petId = fullName:sub(separatorIndex + 3)
                                    if petId and fullName:find(playerName, 1, true) == 1 then
                                        table.insert(petIds, petId)
                                    end
                                end
                            end
                        end

                        if #petIds == 0 then
                            AttackSelectedMobToggle:SetValue(false)
                            return
                        end

                        local petIndex = 1

                        while AttackSelectedMobToggle.Value and not Fluent.Unloaded do
                            local character = player.Character
                            if
                                character and character:FindFirstChild("HumanoidRootPart") and
                                    character:FindFirstChild("Humanoid")
                             then
                                local humanoid = character.Humanoid
                                local playerPos = character.HumanoidRootPart.Position
                                local nearestEnemy, nearestFolder, shortestDistance = nil, nil, math.huge

                                local currentMap = nil
                                for _, map in pairs(mapsFolder:GetChildren()) do
                                    if map:IsA("Folder") then
                                        currentMap = map
                                        break
                                    end
                                end

                                if currentMap then
                                    local mapName = currentMap.Name
                                    local enemyFolder = enemiesFolder:FindFirstChild(mapName)

                                    if enemyFolder then
                                        local selectedMob = Options.MobDropdown.Value
                                        for _, enemy in pairs(enemyFolder:GetChildren()) do
                                            if enemy:IsA("BasePart") and enemy.Parent and enemy.Name == selectedMob then
                                                local distance = (playerPos - enemy.Position).Magnitude
                                                if distance < shortestDistance then
                                                    shortestDistance = distance
                                                    nearestEnemy = enemy
                                                    nearestFolder = enemyFolder
                                                end
                                            end
                                        end
                                    end
                                end

                                if nearestEnemy and nearestFolder then
                                    local currentPetId = petIds[petIndex]
                                    local enemyInstance = nearestEnemy

                                    if enemyInstance and enemyInstance.Parent then
                                        local movementMode = Options.MovementModeDropdown.Value
                                        if movementMode == "TP" then
                                            local targetPosition = enemyInstance.Position + Vector3.new(0, 4, 0)
                                            local tweenInfo =
                                                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                                            local tween =
                                                TweenService:Create(
                                                character.HumanoidRootPart,
                                                tweenInfo,
                                                {CFrame = CFrame.new(targetPosition)}
                                            )
                                            tween:Play()
                                            tween.Completed:Wait()
                                        elseif movementMode == "Walk" then
                                            humanoid.WalkToPoint = enemyInstance.Position
                                            wait(0.5)
                                            if not enemyInstance.Parent then
                                                humanoid.WalkToPoint = character.HumanoidRootPart.Position
                                            end
                                        end

                                        if enemyInstance and enemyInstance.Parent then
                                            local args = {
                                                [1] = "General",
                                                [2] = "Pets",
                                                [3] = "Attack",
                                                [4] = currentPetId,
                                                [5] = enemyInstance
                                            }

                                            pcall(
                                                function()
                                                    remote:FireServer(unpack(args))
                                                end
                                            )
                                        end
                                    end

                                    petIndex = petIndex + 1
                                    if petIndex > #petIds then
                                        petIndex = 1
                                    end
                                end
                            end
                            wait(0.3)
                        end
                    end
                )
            end
        end
    )

    local AutoCollectToggle =
        Tabs.Automation:AddToggle(
        "AutoCollectToggle",
        {
            Title = "Auto Collect",
            Description = "Automatically collects all drops",
            Default = false
        }
    )

    AutoCollectToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local dropsFolder = workspace:WaitForChild("Client"):WaitForChild("Drops")
                        local remote =
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge")

                        while AutoCollectToggle.Value and not Fluent.Unloaded do
                            for _, drop in pairs(dropsFolder:GetChildren()) do
                                local dropId = drop.Name
                                local args = {
                                    [1] = "General",
                                    [2] = "Drops",
                                    [3] = "Collect",
                                    [4] = dropId
                                }

                                pcall(
                                    function()
                                        remote:FireServer(unpack(args))
                                    end
                                )
                            end
                            wait(0.1)
                        end
                    end
                )
            end
        end
    )

    local AutoEquipBestToggle =
        Tabs.Automation:AddToggle(
        "AutoEquipBestToggle",
        {
            Title = "Auto Equip Best",
            Description = "Automatically equips your best pets every 10 seconds",
            Default = false
        }
    )

    AutoEquipBestToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local remote =
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge")

                        while AutoEquipBestToggle.Value and not Fluent.Unloaded do
                            local args = {
                                [1] = "General",
                                [2] = "Pets",
                                [3] = "Equip_Best"
                            }

                            pcall(
                                function()
                                    remote:FireServer(unpack(args))
                                end
                            )

                            wait(10)
                        end
                    end
                )
            end
        end
    )

    local function GetTrialDifficultyFolders()
        local trialEnemiesFolder = workspace:WaitForChild("Server"):WaitForChild("Trial"):WaitForChild("Enemies")
        local difficultyFolders = {}
        for _, folder in pairs(trialEnemiesFolder:GetChildren()) do
            if folder:IsA("Folder") and #folder:GetChildren() > 0 then
                table.insert(difficultyFolders, folder.Name)
            end
        end
        return difficultyFolders
    end

    local TrialMovementModeDropdown =
        Tabs.Trial:AddDropdown(
        "TrialMovementModeDropdown",
        {
            Title = "Trial Movement Mode",
            Description = "Select movement method for trial attacks",
            Values = {"None", "TP"},
            Default = 1
        }
    )

    TrialMovementModeDropdown:OnChanged(
        function(value)
            Options.TrialMovementModeDropdown.Value = value
        end
    )

    local AutoAttackTrialMobToggle =
        Tabs.Trial:AddToggle(
        "AutoAttackTrialMobToggle",
        {
            Title = "Auto Attack Trial Mob",
            Description = "Automatically attacks trial mobs in detected difficulty",
            Default = false
        }
    )

    AutoAttackTrialMobToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local player = game.Players.LocalPlayer
                        local trialEnemiesFolder =
                            workspace:WaitForChild("Server"):WaitForChild("Trial"):WaitForChild("Enemies")
                        local petsFolder = workspace:WaitForChild("Server"):WaitForChild("Pets")
                        local remote =
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge")

                        repeat
                            wait(0.5)
                        until #petsFolder:GetChildren() > 0 or wait(10) == nil

                        local petIds = {}
                        local playerName = player.Name:lower()
                        for _, pet in pairs(petsFolder:GetChildren()) do
                            if pet:IsA("Model") then
                                local fullName = pet.Name:lower()
                                local separatorIndex = fullName:find("---")
                                if separatorIndex then
                                    local petId = fullName:sub(separatorIndex + 3)
                                    if petId and fullName:find(playerName, 1, true) == 1 then
                                        table.insert(petIds, petId)
                                    end
                                end
                            end
                        end

                        if #petIds == 0 then
                            AutoAttackTrialMobToggle:SetValue(false)
                            return
                        end

                        local petIndex = 1

                        while AutoAttackTrialMobToggle.Value and not Fluent.Unloaded do
                            local character = player.Character
                            if
                                character and character:FindFirstChild("HumanoidRootPart") and
                                    character:FindFirstChild("Humanoid")
                             then
                                local playerPos = character.HumanoidRootPart.Position
                                local nearestEnemy, shortestDistance = nil, math.huge
                                local difficultyFolder = nil
                                local difficultyFolders = GetTrialDifficultyFolders()

                                for _, folderName in pairs(difficultyFolders) do
                                    local folder = trialEnemiesFolder:FindFirstChild(folderName)
                                    if folder and #folder:GetChildren() > 0 then
                                        difficultyFolder = folder
                                        break
                                    end
                                end

                                if difficultyFolder and difficultyFolder:IsA("Folder") then
                                    for _, enemy in pairs(difficultyFolder:GetChildren()) do
                                        if enemy:IsA("BasePart") and enemy.Parent then
                                            local distance = (playerPos - enemy.Position).Magnitude
                                            if distance < shortestDistance then
                                                shortestDistance = distance
                                                nearestEnemy = enemy
                                            end
                                        end
                                    end
                                end

                                if nearestEnemy then
                                    local currentPetId = petIds[petIndex]
                                    local enemyInstance = nearestEnemy

                                    if enemyInstance and enemyInstance.Parent then
                                        local movementMode = Options.TrialMovementModeDropdown.Value
                                        if movementMode == "TP" then
                                            local targetPosition = enemyInstance.Position + Vector3.new(0, 4, 0)
                                            local tweenInfo =
                                                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                                            local tween =
                                                TweenService:Create(
                                                character.HumanoidRootPart,
                                                tweenInfo,
                                                {CFrame = CFrame.new(targetPosition)}
                                            )
                                            tween:Play()
                                            tween.Completed:Wait()
                                        end

                                        if enemyInstance and enemyInstance.Parent then
                                            local args = {
                                                [1] = "General",
                                                [2] = "Pets",
                                                [3] = "Attack",
                                                [4] = currentPetId,
                                                [5] = enemyInstance
                                            }

                                            pcall(
                                                function()
                                                    remote:FireServer(unpack(args))
                                                end
                                            )
                                        end
                                    end

                                    petIndex = petIndex + 1
                                    if petIndex > #petIds then
                                        petIndex = 1
                                    end
                                end
                            end
                            wait(0.3)
                        end
                    end
                )
            end
        end
    )

    local AutoTrialTeleportToggle =
        Tabs.Trial:AddToggle(
        "AutoTrialTeleportToggle",
        {
            Title = "Auto Trial Teleport",
            Description = "Automatically teleports to lobby when trial time is 15s or less",
            Default = false
        }
    )

    AutoTrialTeleportToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local success, err =
                            pcall(
                            function()
                                local serverFolder = workspace:WaitForChild("Server", 10)
                                if not serverFolder then
                                    return
                                end
                                local trialFolder = serverFolder:WaitForChild("Trial", 10)
                                if not trialFolder then
                                    return
                                end
                                local trialTimer = trialFolder:WaitForChild("Timer", 10)
                                if not trialTimer then
                                    return
                                end

                                local difficultyTimer = nil
                                local difficulties = {"Easy", "Normal", "Hard"}
                                for _, difficulty in ipairs(difficulties) do
                                    difficultyTimer = trialTimer:FindFirstChild(difficulty)
                                    if difficultyTimer then
                                        break
                                    end
                                end
                                if not difficultyTimer then
                                    return
                                end
                                local valueObject = difficultyTimer:WaitForChild("Value", 5)
                                if not valueObject then
                                    return
                                end

                                local lobbyFolder = trialFolder:WaitForChild("Lobby", 10)
                                if not lobbyFolder then
                                    return
                                end
                                local teleportEffect = lobbyFolder:WaitForChild("TeleportEffect", 10)
                                if not teleportEffect then
                                    return
                                end
                                local remote =
                                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild(
                                    "Bridge",
                                    10
                                )
                                if not remote then
                                    return
                                end

                                while AutoTrialTeleportToggle.Value and not Fluent.Unloaded do
                                    local currentTimerText = valueObject.Text
                                    local minutes, seconds = currentTimerText:match("(%d+):(%d+)")
                                    if minutes and seconds then
                                        local totalSeconds = tonumber(minutes) * 60 + tonumber(seconds)
                                        if totalSeconds <= 15 then
                                            local character = game.Players.LocalPlayer.Character
                                            if character and character:FindFirstChild("HumanoidRootPart") then
                                                local targetPosition = teleportEffect.Position + Vector3.new(0, 4, 0)
                                                local tweenInfo =
                                                    TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                                                local tween =
                                                    TweenService:Create(
                                                    character.HumanoidRootPart,
                                                    tweenInfo,
                                                    {CFrame = CFrame.new(targetPosition)}
                                                )
                                                tween:Play()
                                                tween.Completed:Wait()
                                                local args = {}
                                                pcall(
                                                    function()
                                                        remote:FireServer(unpack(args))
                                                    end
                                                )
                                            end
                                        end
                                    end
                                    wait(0.5)
                                end
                            end
                        )
                    end
                )
            end
        end
    )

    local function GetMapOptions()
        local spawnsFolder = workspace:WaitForChild("Server"):WaitForChild("Spawns")
        local mapOptions = {}
        for _, spawn in pairs(spawnsFolder:GetChildren()) do
            if spawn:IsA("BasePart") then
                table.insert(mapOptions, spawn.Name)
            end
        end
        return mapOptions
    end

    local LeaveTeleportDropdown =
        Tabs.Trial:AddDropdown(
        "LeaveTeleportDropdown",
        {
            Title = "Leave Teleport",
            Description = "Select a map to teleport to when leaving trial",
            Values = GetMapOptions(),
            Default = 1
        }
    )

    LeaveTeleportDropdown:OnChanged(
        function(value)
            Options.LeaveTeleportDropdown.Value = value
        end
    )

    local LeaveOnWaveInput =
        Tabs.Trial:AddInput(
        "LeaveOnWaveInput",
        {
            Title = "Leave on Wave",
            Description = "Enter the wave number to leave on",
            Default = "0",
            Placeholder = "e.g., 12",
            Numeric = true,
            Finished = true
        }
    )

    LeaveOnWaveInput:OnChanged(
        function(value)
            Options.LeaveOnWaveInput.Value = tonumber(value) or 0
        end
    )

    local LeaveTeleportToggle =
        Tabs.Trial:AddToggle(
        "LeaveTeleportToggle",
        {
            Title = "Leave Teleport",
            Description = "Automatically teleports to selected map when wave is reached",
            Default = false
        }
    )

    LeaveTeleportToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local player = game.Players.LocalPlayer
                        local playerGui = player:WaitForChild("PlayerGui")
                        local ui = playerGui:WaitForChild("UI")
                        local hud = ui:WaitForChild("HUD")
                        local cards = hud:WaitForChild("Cards")
                        local frame = cards:WaitForChild("Frame")
                        local frame2 = frame:WaitForChild("Frame")
                        local content = frame2:WaitForChild("Content")
                        local waveFrame = content:WaitForChild("Frame")
                        local wave = waveFrame:WaitForChild("Wave")
                        local waveTextObject = wave:WaitForChild("Wave")

                        local remote =
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge")

                        while LeaveTeleportToggle.Value and not Fluent.Unloaded do
                            if waveTextObject and waveTextObject:IsA("TextLabel") then
                                local waveText = waveTextObject.Text
                                local currentWave =
                                    tonumber(waveText:match("Wave (%d+)")) or tonumber(waveText:match("Wave: (%d+)")) or
                                    tonumber(waveText:match("Wave (%d+)/%d+")) or
                                    tonumber(waveText:match("(%d+)"))

                                if currentWave then
                                    local leaveWave = Options.LeaveOnWaveInput.Value
                                    if currentWave >= leaveWave then
                                        local map = Options.LeaveTeleportDropdown.Value
                                        if map then
                                            local character = player.Character
                                            if character and character:FindFirstChild("HumanoidRootPart") then
                                                local args = {
                                                    [1] = "General",
                                                    [2] = "Maps",
                                                    [3] = "Teleport",
                                                    [4] = map
                                                }
                                                pcall(
                                                    function()
                                                        remote:FireServer(unpack(args))
                                                    end
                                                )
                                                LeaveTeleportToggle:SetValue(false)
                                            end
                                        end
                                    end
                                end
                            end
                            wait(1)
                        end
                    end
                )
            end
        end
    )

    local EggModeDropdown =
        Tabs.Egg:AddDropdown(
        "EggModeDropdown",
        {
            Title = "Select Mode",
            Description = "Choose whether to open a single egg or multiple eggs",
            Values = {"Single", "Multi"},
            Default = "Single"
        }
    )

    EggModeDropdown:OnChanged(
        function(value)
            Options.EggModeDropdown.Value = value
        end
    )

    local EggMapDropdown =
        Tabs.Egg:AddDropdown(
        "EggMapDropdown",
        {
            Title = "Select Map",
            Description = "Choose the map to open eggs in",
            Values = GetMapOptions(),
            Default = "Piece Village"
        }
    )

    EggMapDropdown:OnChanged(
        function(value)
            Options.EggMapDropdown.Value = value
        end
    )

    local AutoOpenEggToggle =
        Tabs.Egg:AddToggle(
        "AutoOpenEggToggle",
        {
            Title = "Auto Open Egg",
            Description = "Automatically opens eggs in the selected map and mode",
            Default = false
        }
    )

    AutoOpenEggToggle:OnChanged(
        function(value)
            if value then
                task.spawn(
                    function()
                        local remote =
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge", 10)
                        if not remote then
                            AutoOpenEggToggle:SetValue(false)
                            return
                        end

                        while AutoOpenEggToggle.Value and not Fluent.Unloaded do
                            local mode = Options.EggModeDropdown.Value
                            local map = Options.EggMapDropdown.Value
                            if not map then
                                AutoOpenEggToggle:SetValue(false)
                                return
                            end

                            local action = (mode == "Single") and "Open" or "Multi"
                            local args = {
                                [1] = "General",
                                [2] = "Eggs",
                                [3] = action,
                                [4] = map,
                                [5] = "Yen"
                            }

                            pcall(
                                function()
                                    remote:FireServer(unpack(args))
                                end
                            )

                            wait(1)
                        end
                    end
                )
            end
        end
    )

    local MapDropdown =
        Tabs.Teleport:AddDropdown(
        "MapDropdown",
        {
            Title = "Choose Map",
            Description = "Select a map to teleport to",
            Values = GetMapOptions(),
            Default = 1
        }
    )

    MapDropdown:OnChanged(
        function(value)
            Options.MapDropdown.Value = value
        end
    )

    local TeleportButton =
        Tabs.Teleport:AddButton(
        {
            Title = "Teleport",
            Description = "Teleport to the selected map",
            Callback = function()
                local map = Options.MapDropdown.Value
                if map then
                    local args = {
                        [1] = "General",
                        [2] = "Maps",
                        [3] = "Teleport",
                        [4] = map
                    }
                    local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Bridge")
                    pcall(
                        function()
                            remote:FireServer(unpack(args))
                        end
                    )
                end
            end
        }
    )
end

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

SaveManager:LoadAutoloadConfig()
